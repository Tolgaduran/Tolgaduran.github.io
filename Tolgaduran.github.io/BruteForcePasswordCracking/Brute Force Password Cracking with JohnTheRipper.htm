<DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
  
    <title>Tolga | John The Ripper</title>
    <!-- ICON -->
    <link href="img/linux.png" rel="icon" type="image/png" />
    <!-- Google API -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway">
    <!-- Link to my CSS -->
    <link href="../css/style.css" rel="stylesheet">
  
  </head>

<body>
<div class="index-title">
<h1>BruteForce Password Cracking with JohnTheRipper</h1>
</div>

<p> I completed this lab in the comfort of my own home. Within the lab I found an old computer
    I had lying around and installed Kali Linux, from there I tested out one of its password cracking tools,
    known as <strong>John the Ripper</strong> </p>

<h2>Setting Up</h2>

<h3> This lab is a learning process, therefore the targets I wanted to crack 
    are simple text files that are zipped with a password </h3>


<p>1. Install Winrar</p>

<img width=602 height=53 id="Picture 8" src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image001.jpg">

<p>2. Archive files (make sure to use -p for password)<p>

<img width=602 height=52 id="Picture 7" src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image002.jpg">


<h3> How Hashing Works </h3>
<p> Hashes are functions or algorithms which make plain text unreadable, it
cannot be reverse engineered because of their complexity. <strong>RAR5 uses the SHA256 algorithm</strong> </p>

<h3>Here is a problem that demonstrates why its hard to reverse engineer a hash</h3>
<p>If I gave you the number 4 and asked how I got to that number the posibilities are: </p>

<p>3 + 1,</p>

<p>2 + 1 + 1,</p>

<p>2 + 2 etc.</p>

<p> <strong>Hashing functions are obviously far more complex than this example </strong> </p>

<p>John the ripper offers 3 methods of cracking hashes:
    <li> <strong>Brute Force:</strong> Trying Every Possible Combination of characters (takes ages depending on password length)</li>
    <li><strong>Brute Force with Ruleset:</strong> Allows us to specify things in the password that we know, depending on the information we know it can 
        speed up the process a lot</li>
    <li> <strong>WordLists: </strong> This works if the user has set a common password, a big database of passwords can be found using the RockYou.txt leak</li>
</p>

<h2>Implementing JTR on a simple password</h2>

<p>The first file I named 'Secret_Password' with the password being literally 'password'.</p>

<p>I issued the 'rar2john' command which extracts the hash from the file, I then
issued a second command to store the output of the command in a file which I
named 'hash.txt'</p>

<img width=602 height=42 id="Picture 6"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image003.jpg"></p>

<img width=531 height=75 id="Picture 5"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image004.png"></p>

<p>Once I had done this all that was left to do was to ask John to crack the
password...</p>

<img width=602 height=128 id="Picture 4"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image005.jpg">

<p>Done incredibly fast. So fast that it would make sense if the program goes through some
passwords which are obvious, such as the one that I set</p>

<h2>Implementing JTR on a complex password</h2>

<p> With a new rar file named 'SecretStuff' with password 'Strong123Password'.
    The program after an hour was not able to crack the password, not only that but I dont think it was close.</p>

<h2>Implementing John The Ripper with a set of rules + wordlist</h2>

<p>Using a wordlist is very easy to do. I took it a step further by creating a wordlist,
    then implementing rules ontop of the wordlist seen below!</p>

<img width=602 height=86 id="Picture 3"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image006.png">

<p>John The Ripper has a webpage that explains its unique regex, can be found here: <br>
<a href="https://www.openwall.com/john/doc/RULES.shtml">https://www.openwall.com/john/doc/RULES.shtml</a> <br> <br>
Using the ruleset given it was able to solve the password!
</p>

<img border=0 width=602 height=117 id="Picture 2"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image007.jpg">

<p>However when playing around with rulesets less consise, I struggled yet again
    to crack the hash
</p>

<img border=0 width=602 height=85 id="Picture 1"
src="Brute%20Force%20Password%20Cracking%20with%20JohnTheRipper_files/image008.png">

<h2>Conclusion / Things to take away from this</h2>

<p> Creating strong passwords is crucial for protecting personal information, as demonstrated 
    by tools like John the Ripper. <br> Simple passwords are easily guessed, while complex ones are 
    much harder to crack. Algorithms like SHA256 make passwords unreadable, but as computers 
    get stronger, hackers can crack simpler passwords faster. <br> It's important to regularly update 
    passwords and use methods like combining numbers, symbols, and letters to make them harder to guess. 
    As technology advances, keeping passwords strong and using extra security measures like two-factor authentication 
    becomes even more important to stay safe online.</p>

<div class="container">
    <footer>
      <hr>
      <p>
        <strong> 2024 Copyrights - </strong>
        <span>All Rights Reserved - <a href="mailto:Tolgamutlu611@hotmail.com">Contact Me</a></span>
      </p>
    </footer>
  </div>

</body>

</html>
